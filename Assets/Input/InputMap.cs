//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""b6e7f350-745c-40b8-a259-1bc52350bfbd"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e5fef5f4-c2dc-4183-b38d-4a3953d472b9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchTap"",
                    ""type"": ""Value"",
                    ""id"": ""30d82f7f-46d9-4ab5-bea3-7fb7988b4790"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchSlowTap"",
                    ""type"": ""Value"",
                    ""id"": ""e28b2c1a-e156-455d-b881-86492d966200"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchHold"",
                    ""type"": ""Value"",
                    ""id"": ""98e1f701-be2b-443d-a70a-5d67c42787c5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8950567b-aeb0-4b7b-a6f2-5dc1b40d72f9"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""815d60eb-f51f-4546-b4c5-48d6b769d68c"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5842da32-9e28-4768-b37f-15591931b10b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchSlowTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4ba104d-cd05-4e4b-a753-d6ebdec1641a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_TouchPosition = m_Movement.FindAction("TouchPosition", throwIfNotFound: true);
        m_Movement_TouchTap = m_Movement.FindAction("TouchTap", throwIfNotFound: true);
        m_Movement_TouchSlowTap = m_Movement.FindAction("TouchSlowTap", throwIfNotFound: true);
        m_Movement_TouchHold = m_Movement.FindAction("TouchHold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_TouchPosition;
    private readonly InputAction m_Movement_TouchTap;
    private readonly InputAction m_Movement_TouchSlowTap;
    private readonly InputAction m_Movement_TouchHold;
    public struct MovementActions
    {
        private @InputMap m_Wrapper;
        public MovementActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_Movement_TouchPosition;
        public InputAction @TouchTap => m_Wrapper.m_Movement_TouchTap;
        public InputAction @TouchSlowTap => m_Wrapper.m_Movement_TouchSlowTap;
        public InputAction @TouchHold => m_Wrapper.m_Movement_TouchHold;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @TouchPosition.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchPosition;
                @TouchTap.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchTap;
                @TouchTap.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchTap;
                @TouchTap.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchTap;
                @TouchSlowTap.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchSlowTap;
                @TouchSlowTap.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchSlowTap;
                @TouchSlowTap.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchSlowTap;
                @TouchHold.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchHold;
                @TouchHold.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchHold;
                @TouchHold.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnTouchHold;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @TouchTap.started += instance.OnTouchTap;
                @TouchTap.performed += instance.OnTouchTap;
                @TouchTap.canceled += instance.OnTouchTap;
                @TouchSlowTap.started += instance.OnTouchSlowTap;
                @TouchSlowTap.performed += instance.OnTouchSlowTap;
                @TouchSlowTap.canceled += instance.OnTouchSlowTap;
                @TouchHold.started += instance.OnTouchHold;
                @TouchHold.performed += instance.OnTouchHold;
                @TouchHold.canceled += instance.OnTouchHold;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    public interface IMovementActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchTap(InputAction.CallbackContext context);
        void OnTouchSlowTap(InputAction.CallbackContext context);
        void OnTouchHold(InputAction.CallbackContext context);
    }
}
